@{
    //Layout = "~/";
}
@model AttackPrevent.Models.ValidateCodeModel
@Styles.Render("~/Content/home.css?v=" + Guid.NewGuid())
@Styles.Render("~/Content/jquery.mloading/jquery.mloading.css?v=" + Guid.NewGuid())
@Scripts.Render("~/Scripts/jquery.mloading/jquery.mloading.js?v=" + Guid.NewGuid())

<style type="text/css">
    .table {
        table-layout: fixed;
        word-break: break-all;
    }
    .hidden-input {
        position: relative;
        width: 0;
        height: 0;
        overflow: hidden;
    }
        /*让input看不见，而不是直接display: none，如果直接display: none，则不生效*/
        .hidden-input .form-control {
            position: absolute;
            left: -1000px;
        }
</style>
<div class="logContainer">


    <div class="queryContainer">
        <ol class="breadcrumb">
            <li class="active">Whitelist Manage</li>
        </ol>
        <div class="col-md-4 form-group">
            <div class="col-md-4 label-col">
                <label for="select-zoneName">Zone Name</label>
            </div>
            <div class="col-md-8">
                @Html.DropDownList("select-zoneName", new SelectList(ViewBag.ZoneList, "Value", "Text"), new { @class = "form-control" })
            </div>
        </div>

        <div class="col-md-4 form-group">
            <div class="col-md-4 label-col">
                <label for="txt-StartTime">Start Time</label>
            </div>
            <div class="col-md-8">
                <input type="text" name="startTime" id="txt-StartTime" class="form-control" />
            </div>
        </div>

        <div class="col-md-4 form-group">
            <div class="col-md-4  label-col">
                <label for="txt-EndTime">End Time</label>
            </div>
            <div class="col-md-8">
                <input type="text" name="endTime" id="txt-EndTime" class="form-control" />
            </div>
        </div>


        <div class="col-md-4 form-group">
            <div class="col-md-4  label-col">
                <label for="txt-IP">IP</label>
            </div>
            <div class="col-md-8">
                <input type="text" name="IP" id="txt-IP" class="form-control" />
            </div>
        </div>

        <div class="col-md-4 form-group">
            <div class="col-md-4  label-col">
                <label for="txt-notes">Notes</label>
            </div>
            <div class="col-md-8">
                <input type="text" name="notes" id="txt-notes" class="form-control" />
            </div>
        </div>
        <div class="hidden-input">
            <!--让浏览器自动填充到这个input-->
            <input type="text" class="form-control">
        </div>

        <div class="col-md-4 form-group" style="text-align: right">
            <button id="btn-query" type="button" class="btn btn-primary">Query</button>
            @if (ViewBag.IsAdmin)
            {
                <a href="~/Home/AddWhiteList" class="btn btn-default">Add New</a>
            }
        </div>
    </div>

    <div class="resultContainer">
        <table id="table" class="table table-bordered"></table>
    </div>
</div>
<!-- 模态框（Modal） -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title" id="myModalLabel">Check Validate Code</h4>
            </div>
            <div class="modal-body">
                <div class="row form-group">
                    <label class="col-md-4 label-col">Verification Code</label>
                    <div class="col-md-8 ">
                        @Html.TextBox("ValidateCode", "", new { @class = "form-control", @type = "password" })
                        @Html.ValidationMessage("ValidateCode")
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button id="submit" type="button" class="btn btn-primary">Submit</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>
<!-- /.modal -->

<script type="text/javascript">
    var TableInit = function () {
        var oTableInit = new Object();
        //初始化Table
        oTableInit.Init = function () {
            $('#table').bootstrapTable({
                url: '/Home/GetWhiteLists',         //请求后台的URL（*）
                method: 'get',                      //请求方式（*）
                toolbar: '#toolbar',                //工具按钮用哪个容器
                striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                pagination: true,                   //是否显示分页（*）
                sortable: false,                     //是否启用排序
                sortOrder: "asc",                   //排序方式
                queryParams: oTableInit.queryParams,//传递参数（*）
                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                pageNumber: 1,                       //初始化加载第一页，默认第一页
                pageSize: 10,                       //每页的记录行数（*）
                pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
                search: false,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
                strictSearch: true,
                showColumns: false,                  //是否显示所有的列
                showRefresh: false,                  //是否显示刷新按钮
                minimumCountColumns: 2,             //最少允许的列数
                clickToSelect: true,                //是否启用点击选中行
                height: 500,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "IP",                     //每一行的唯一标识，一般为主键列
                showToggle: false,                    //是否显示详细视图和列表视图的切换按钮
                cardView: false,                    //是否显示详细视图
                detailView: false,                   //是否显示父子表
                columns: [{
                    field: 'ID',
                    title: '#',
                    width: '4%',
                    formatter: function (value, row, index) {
                        var pageSize = $('#table').bootstrapTable('getOptions').pageSize;     //通过table的#id 得到每页多少条
                        var pageNumber = $('#table').bootstrapTable('getOptions').pageNumber; //通过table的#id 得到当前第几页
                        return pageSize * (pageNumber - 1) + index + 1;    // 返回每条的序号： 每页条数 *（当前页 - 1 ）+ 序号
                    }
                },
                {
                    field: 'IP',
                    title: 'IP',
                    width: '10%',
                }, {
                    field: 'CreateTime',
                    title: 'Create Time',
                    width: '10%',
                }, {
                    field: 'Notes',
                    title: 'Notes',
                    width: '66%',
                }, {
                    field: 'Button',
                    title: 'Operation',
                    align: 'center',
                    width: '10%',
                    events: operateEvents,
                    formatter: operateFormatter,
                    visible: '@ViewBag.IsAdmin'.toLowerCase() === 'true'
                },
                ],
                formatLoadingMessage: function () {
                    $("body").mLoading({
                        text: "Processing..."
                    }, "show");
                },
                onLoadSuccess: function () {
                    $("body").mLoading("hide");
                }
            });
        };

        //得到查询的参数
        oTableInit.queryParams = function (params) {
            var temp = {   //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
                limit: params.limit,   //页面大小
                offset: params.offset,  //页码
                zoneID: $("#select-zoneName").val(),
                startTime: $("#txt-StartTime").val() === "" ? '@DateTime.MinValue' : $("#txt-StartTime").val(),
                endTime: $("#txt-EndTime").val() === "" ? '@DateTime.MinValue' : $("#txt-EndTime").val(),
                ip: $("#txt-IP").val(),
                notes: $("#txt-notes").val(),
            };
            return temp;
        };
        return oTableInit;
    };
    var oTable = new TableInit();
    var currRow = null;
    $(document).ready(function () {
        oTable.Init();
        $("#submit").click(function () {
            debugger
            var para = oTable.queryParams({ limit: 10, offset: 0 });
            var zoneID = para.zoneID;
            var ip = currRow.IP;
            
            var code = $("#ValidateCode").val();
            if (!code) {
                showWarning("Verification Code is requierd.");
                return;
            }

            $.ajax({
                type: "POST",
                url: "/Home/DeleteWhiteList?zoneID=" + zoneID + "&ip=" + ip + "&vcode=" + code,
                dataType: "json",
                async: true,
                success: function (data) {                    
                    if (data.isSuccessed) {
                        $('#myModal').modal('hide');
                        refresh();
                    } else {
                        alert(data.errorMsg);
                    }
                },
                error: function (jqXHR) {
                    console.log("Error: " + jqXHR.status);
                }
            });

        });
    });
    $("#btn-query").click(function () {
        var start = $("#txt-StartTime").val();
        var end = $("#txt-EndTime").val();

        if (start && end) {
            if (end < start) {
                showWarning("The end time must be greater than the start time.");
                return;
            }
        }

        var para = oTable.queryParams({ limit: 10, offset: 0 });
        if (!checkCloundflareAuth(para.zoneID)) {
            return;
        }

        $('#table').bootstrapTable('refreshOptions', { limit: 10, offset: 0, pageNumber: 1 });
        //refresh();
    });
    $('#btn-export').click(function () {
        var para = oTable.queryParams({ limit: 10, offset: 0 });
        var uuu = "/home/ExportCloundflareLogs?zoneID=" + para.zoneID + "&startTime=" + para.startTime + "&endTime=" + para.endTime + "&host=" + para.host + "&sample=" + para.sample + "&siteId=" + para.siteId + "&url=" + para.url + "&cacheStatus=" + para.cacheStatus + "&ip=" + para.ip + "&responseStatus=" + para.responseStatus;
        $('#btn-export').attr("href", uuu);
        //$.get(uuu);
    });

    function refresh() {
        $('#table').bootstrapTable('refresh');
    }
    function operateFormatter(value, row, index) {
        if ('@ViewBag.IsAdmin'.toLowerCase() === 'true') {
            return [
                '<a id="btn-delete" href="#" class="rate-delete"><span class="glyphicon glyphicon-trash btn-in-table" aria-hidden="true" title="Delete"></span></a>'
            ].join('');
        }
        else {
            return [].join('');
        }
    }
    window.operateEvents = {
        'click #btn-delete': function (e, value, row, index) {
            if (confirm('Are you sure want to remove this IP from the whitelist?')) {
                currRow = row;
                $("#myModal").modal('show');          
            }
        }
    }
    function checkCloundflareAuth(zoneID) {
        var isSuccessed = false;
        $.ajax({
            type: "GET",
            url: "/Home/CheckCloundflareAuth?zoneID=" + zoneID,
            dataType: "json",
            async: false,
            success: function (data) {
                var status = data.isSuccessed;
                if (status) {
                    isSuccessed = true;
                } else {
                    alert(data.errorMsg);
                }
            },
            error: function (jqXHR) {
                console.log("Error: " + jqXHR.status);
            }
        });
        return isSuccessed;
    }
</script>
