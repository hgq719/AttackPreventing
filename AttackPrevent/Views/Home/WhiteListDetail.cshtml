
@{
}

@Styles.Render("~/Content/home.css?v=" + Guid.NewGuid())
@Styles.Render("~/Content/jquery.mloading/jquery.mloading.css?v=" + Guid.NewGuid())
@Scripts.Render("~/Scripts/jquery.mloading/jquery.mloading.js?v=" + Guid.NewGuid())

<style type="text/css">
    .table {
        table-layout: fixed;
        word-break: break-all;
    }
</style>
<div class="logContainer">

    <div class="queryContainer">
        <ol class="breadcrumb">
            <li><a href="~/Home/WhiteList">Whitelist Manage</a></li>
            <li class="active">Whitelist Detail</li>
        </ol>
     

        <div class="col-md-4 form-group">
            <div class="col-md-4 label-col">
                <label for="txt-StartTime">Start Time</label>
            </div>
            <div class="col-md-8">
                <input type="text" name="startTimeBasic" id="txt-StartTime" class="form-control" />
            </div>
        </div>

        <div class="col-md-4 form-group">
            <div class="col-md-4  label-col">
                <label for="txt-EndTime">End Time</label>
            </div>
            <div class="col-md-8">
                <input type="text" name="endTimeBasic" id="txt-EndTime" class="form-control" />
            </div>
        </div>

        <div class="col-md-4 form-group" style="text-align: right">
            <button id="btn-query" type="button" class="btn btn-primary">Query</button>
        </div>

    </div>

    <div class="resultContainer">
        <table id="table" class="table table-bordered"></table>
    </div>
</div>

<script type="text/javascript">
    var TableInit = function () {
        var oTableInit = new Object();
        //初始化Table
        oTableInit.Init = function () {
            $('#table').bootstrapTable({
                url: '/Home/GetWhiteListDetail',         //请求后台的URL（*）
                method: 'get',                      //请求方式（*）
                toolbar: '#toolbar',                //工具按钮用哪个容器
                striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                pagination: true,                   //是否显示分页（*）
                sortable: false,                     //是否启用排序
                sortOrder: "asc",                   //排序方式
                queryParams: oTableInit.queryParams,//传递参数（*）
                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                pageNumber: 1,                       //初始化加载第一页，默认第一页
                pageSize: 100,                       //每页的记录行数（*）
                pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
                search: false,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
                strictSearch: true,
                showColumns: false,                  //是否显示所有的列
                showRefresh: false,                  //是否显示刷新按钮
                minimumCountColumns: 2,             //最少允许的列数
                clickToSelect: true,                //是否启用点击选中行
 //               height: 500,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "IP",                     //每一行的唯一标识，一般为主键列
                showToggle: false,                    //是否显示详细视图和列表视图的切换按钮
                cardView: false,                    //是否显示详细视图
                detailView: false,                   //是否显示父子表
                columns: [{
                    field: 'ID',
                    title: '#',
                    width: '4%',
                    formatter: function (value, row, index) {
                        var pageSize = $('#table').bootstrapTable('getOptions').pageSize;     //通过table的#id 得到每页多少条
                        var pageNumber = $('#table').bootstrapTable('getOptions').pageNumber; //通过table的#id 得到当前第几页
                        return pageSize * (pageNumber - 1) + index + 1;    // 返回每条的序号： 每页条数 *（当前页 - 1 ）+ 序号
                    }
                },
                {
                    field: 'Title',
                    title: 'Report Date',
                    width: '10%',
                }, {
                    field: 'IP',
                    title: 'IP',
                    width: '10%',
                }, {
                    field: 'HostName',
                    title: 'HostName',
                    width: '10%',
                }, {
                    field: 'MaxDisplay',
                    title: 'Max',
                    width: '10%',
                }, {
                    field: 'MinDisplay',
                    title: 'Min',
                    width: '10%',
                }, {
                    field: 'AvgDisplay',
                    title: 'Avg.',
                    width: '10%',
                }, {
                    field: 'FullUrl',
                    title: 'Full URLs',
                    width: '36%',
                    formatter: URLsFormatter,
                }
                ],
                formatLoadingMessage: function () {
                    $("body").mLoading({
                        text: "Processing..."
                    }, "show");
                },
                onLoadSuccess: function () {
                    $("body").mLoading("hide");
                }
            });
        };

        //得到查询的参数
        oTableInit.queryParams = function (params) {
            var temp = {   //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
                limit: params.limit,   //页面大小
                offset: params.offset,  //页码
                Ip: '@ViewBag.Ip',
                startTime:  $("#txt-StartTime").val() === "" ? '@DateTime.UtcNow.AddDays(-5)' : $("#txt-StartTime").val(),
                endTime: $("#txt-EndTime").val() === "" ? '@DateTime.UtcNow' : $("#txt-EndTime").val() + ' 23:59:59',
            };
            return temp;
        };

        return oTableInit;
    };
    var oTable = new TableInit();
    $(document).ready(function () {
        oTable.Init();

        $("#txt-StartTime").val('@DateTime.UtcNow.AddDays(-5).ToString("MM/dd/yyyy")');
        $("#txt-EndTime").val('@DateTime.UtcNow.ToString("MM/dd/yyyy")');        
    });

    $("#btn-query").click(function () {
        var start = $("#txt-StartTime").val();
        var end = $("#txt-EndTime").val();

        if (start && end) {
            if (end < start) {
                showWarning("The end time must be greater than the start time.");
                return;
            }
        }

        var para = oTable.queryParams({ limit: 10, offset: 0 });

        $('#table').bootstrapTable('refreshOptions', { limit: 10, offset: 0, pageNumber: 1 });

        $("body").mLoading({
            text: "Processing..."
        }, "show");
    });

    function refresh() {
        $('#table').bootstrapTable('refresh');
    }
    function URLsFormatter(value, row, index) {
        var data = JSON.parse(value);
        var result = '';
        for (let i = 0; i < data.length; ++i) {
            result += '<p>' + data[i] + '</p>'
        }
        return result;
    }
</script>